{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD/uptech/front-sprint5/src/context/LoadingContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoadingContext = /*#__PURE__*/createContext();\nexport const LoadingContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const addRequest = () => {\n    setIsLoading(true);\n  };\n\n  const removeRequest = () => {\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: {\n      isLoading,\n      addRequest,\n      removeRequest\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoadingContextProvider, \"5S7VQ8+9ArWv2AFPIfnY+LwrHeg=\");\n\n_c = LoadingContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingContextProvider\");","map":{"version":3,"sources":["/Volumes/Macintosh HD/uptech/front-sprint5/src/context/LoadingContext.js"],"names":["React","createContext","useState","LoadingContext","LoadingContextProvider","children","isLoading","setIsLoading","addRequest","removeRequest"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAEA,OAAO,MAAMC,cAAc,gBAAGF,aAAa,EAApC;AAEP,OAAO,MAAMG,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMM,UAAU,GAAG,MAAM;AACvBD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAME,aAAa,GAAG,MAAM;AAC1BF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD;;AAIA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAED,MAAAA,SAAF;AAAaE,MAAAA,UAAb;AAAyBC,MAAAA;AAAzB,KAAhC;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhBM;;GAAMD,sB;;KAAAA,sB","sourcesContent":["import React, { createContext, useState } from 'react'\n\nexport const LoadingContext = createContext()\n\nexport const LoadingContextProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true)\n\n  const addRequest = () => {\n    setIsLoading(true)\n  }\n\n  const removeRequest = () => {\n    setIsLoading(false)\n  }\n\n  return (\n    <LoadingContext.Provider value={{ isLoading, addRequest, removeRequest }}>\n      {children}\n    </LoadingContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}