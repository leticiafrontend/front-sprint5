{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD/uptech/front-sprint5/src/context/ProductsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { useLoading } from '../hooks/useLoading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductsContext = /*#__PURE__*/createContext();\nexport const ProductsContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [products, setProducts] = useState();\n  const [all, setAll] = useState();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    addRequest,\n    removeRequest\n  } = useLoading();\n  const {\n    pathname\n  } = useLocation();\n  useEffect(() => {\n    addRequest();\n    fetch('/data/products.json').then(resp => resp.json()).then(json => {\n      setAll(json);\n      setProducts(json);\n\n      if (pathname === '/') {\n        enqueueSnackbar('Produtos carregados com sucesso!', {\n          variant: 'success'\n        });\n      }\n    }).catch(() => enqueueSnackbar('Erro ao carregar os produtos!', {\n      variant: 'error'\n    })).finally(() => removeRequest());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ProductsContext.Provider, {\n    value: {\n      all,\n      products,\n      setProducts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductsContextProvider, \"5i/7ZH8TiSbUx+IKRB8/3GIkf1E=\", false, function () {\n  return [useSnackbar, useLoading, useLocation];\n});\n\n_c = ProductsContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsContextProvider\");","map":{"version":3,"sources":["/Volumes/Macintosh HD/uptech/front-sprint5/src/context/ProductsContext.js"],"names":["React","createContext","useEffect","useState","useLocation","useSnackbar","useLoading","ProductsContext","ProductsContextProvider","children","products","setProducts","all","setAll","enqueueSnackbar","addRequest","removeRequest","pathname","fetch","then","resp","json","variant","catch","finally"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,OAAO,MAAMC,eAAe,gBAAGN,aAAa,EAArC;AAEP,OAAO,MAAMO,uBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,EAA9B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAsBT,WAAW,EAAvC;AACA,QAAM;AAAEU,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCV,UAAU,EAAhD;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeb,WAAW,EAAhC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU;AACVG,IAAAA,KAAK,CAAC,qBAAD,CAAL,CACGC,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdR,MAAAA,MAAM,CAACQ,IAAD,CAAN;AACAV,MAAAA,WAAW,CAACU,IAAD,CAAX;;AACA,UAAIJ,QAAQ,KAAK,GAAjB,EAAsB;AACpBH,QAAAA,eAAe,CAAC,kCAAD,EAAqC;AAClDQ,UAAAA,OAAO,EAAE;AADyC,SAArC,CAAf;AAGD;AACF,KAVH,EAWGC,KAXH,CAWS,MACLT,eAAe,CAAC,+BAAD,EAAkC;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAAlC,CAZnB,EAcGE,OAdH,CAcW,MAAMR,aAAa,EAd9B;AAeD,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEJ,MAAAA,GAAF;AAAOF,MAAAA,QAAP;AAAiBC,MAAAA;AAAjB,KAAjC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BM;;GAAMD,uB;UAGiBH,W,EACUC,U,EACjBF,W;;;KALVI,uB","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useSnackbar } from 'notistack'\nimport { useLoading } from '../hooks/useLoading'\n\nexport const ProductsContext = createContext()\n\nexport const ProductsContextProvider = ({ children }) => {\n  const [products, setProducts] = useState()\n  const [all, setAll] = useState()\n  const { enqueueSnackbar } = useSnackbar()\n  const { addRequest, removeRequest } = useLoading()\n  const { pathname } = useLocation()\n\n  useEffect(() => {\n    addRequest()\n    fetch('/data/products.json')\n      .then((resp) => resp.json())\n      .then((json) => {\n        setAll(json)\n        setProducts(json)\n        if (pathname === '/') {\n          enqueueSnackbar('Produtos carregados com sucesso!', {\n            variant: 'success',\n          })\n        }\n      })\n      .catch(() =>\n        enqueueSnackbar('Erro ao carregar os produtos!', { variant: 'error' })\n      )\n      .finally(() => removeRequest())\n  }, [])\n\n  return (\n    <ProductsContext.Provider value={{ all, products, setProducts }}>\n      {children}\n    </ProductsContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}